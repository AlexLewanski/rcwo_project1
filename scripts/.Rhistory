panel.border = element_blank(),
axis.line.x = element_line(color = '#4c4c4c', size = 1.1),
axis.line.y = element_line(color = '#4c4c4c', size = 1.5),
plot.margin = unit(c(0.25,1,0,1), "cm"),
axis.title.x = element_text(size = 18),
legend.position = 'none',
axis.title.y = element_text(margin = margin(t = 0, r = 4.75, b = 0, l = 0))
) +
scale_y_continuous(breaks = c(0, 0.5, 1),
labels = c("0", "0.5", "1")) +
scale_x_continuous(expand = c(0.01, 0), limits = c(1993.5, 2022.5)) +
xlab('Year') +
ylab("Ancestry")
rcw_partial_founder_summed %>%
ggplot() +
geom_line(aes(x = year,
y = partial_founder_fped_sum,
color = group,
group = founder_id)) +
geom_point(aes(x = year,
y = partial_founder_fped_sum,
color = group,
group = founder_id)) +
theme_bw() +
theme(#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(linetype = 'dashed', color = '#d8d8d8'),
panel.border = element_blank(),
axis.line.x = element_line(color = '#4c4c4c', linewidth = 1.1),
#axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.line.y = element_line(color = '#4c4c4c', linewidth = 1.1),
axis.ticks = element_line(color = '#808080', linewidth = 0.7),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(plot.margin = unit(c(1,1,-0.05,1), "cm")
#axis.title.y = element_blank()
)
perind_partial_fped %>%
mutate(transloc_prop = transloc_fped_perind/total_fped,
transloc_prop = if_else(is.na(transloc_prop), 0, transloc_prop)) %>%
arrange(transloc_prop) %>%
ggplot(aes(x = year, y = total_fped, fill = transloc_prop)) +
geom_point(color = '#808080', pch = 21, size = 3.25, stroke = 0.25, alpha = 0.8,
position = position_jitter(width = 0.15)) +
theme_bw() +
theme(#panel.grid.major = element_blank(),
#panel.grid.minor = element_blank(),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(linetype = 'dashed', color = '#d8d8d8'),
panel.border = element_blank(),
axis.line.x = element_line(color = '#4c4c4c', linewidth = 1.1),
#axis.line.x = element_blank(),
axis.text.x = element_blank(),
axis.line.y = element_line(color = '#4c4c4c', linewidth = 1.1),
axis.ticks = element_line(color = '#808080', linewidth = 0.7),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
theme(plot.margin = unit(c(1,1,-0.05,1), "cm")
#axis.title.y = element_blank()
) +
xlim(1993.5, 2022.5) +
ylab("Inbreeding") +
scale_fill_gradient2(low = "#00cdcd", mid="#f2f2f2", high= '#e166e1', midpoint = 0.5)
rnorm(1, 0, 1)
rnorm(5, 0, 1)
lapply(1:5, rnorm(5, 0, 1))
?rnorm
lapply(1:5, rnorm, n = 5, mean = 0, sd = 1))
lapply(1:5, rnorm, n = 5, mean = 0, sd = 1)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
set.seed(598)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
set.seed(598)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
set.seed(598)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
set.seed(598)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
set.seed(598)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
set.seed(598)
lapply(1:5, function(x) rnorm(n = 5, mean = 0, sd = 1))
gd_count <- 20000L
set.seed(345993)
rcws_gdrop <- gene_drop_matrix(ped = rcw_processed_list$ped_processed[,1:3],
sims = gd_count,
report_progress = TRUE)
rcws_ancestry_info <- quantify_ancestry(gdrop_mat_output = rcws_gdrop,
founder_group_info = rcws_founder_info)
rcws_gdrop$sim_count[1,2]
rcws_gdrop$sim_count
rcws_gdrop$sire[1:3,2:4]
rcws_gdrop$sire[10:30,2:4]
rcws_gdrop$sire[10:40,2:4]
rcws_gdrop$sire[500:600,2:4]
rcws_gdrop$sire[800:900,2:4]
rcws_gdrop$sire[800:900,2:8]
rcws_ancestry_info <- quantify_ancestry(gdrop_mat_output = rcws_gdrop,
founder_group_info = rcws_founder_info)
rcws_ancestry_info_update <- rcws_ancestry_info %>%
bind_rows(., rcws_ancestry_info %>%
group_by(id) %>%
filter(n() < 2) %>%
filter(!'transloc' %in% group) %>%
ungroup() %>%
select(id) %>%
mutate(group = 'transloc',
allele_count = gd_count*2,
anc_prop = 0)) %>%
filter(group == 'transloc')
rcw_inbr_merge <- pop_info_list[['Scenario3']] %>%
rename(id = RCWid) %>%
left_join(rcws_inbr, by = 'id')  %>%
left_join(rcws_ancestry_info_update, by = 'id')
rcw_partial_founder_fped <- partial_founder_fped_gdrop_mat(gdrop_mat_output = rcws_gdrop)
rcw_processed_partial_founder <- left_join(rcw_partial_founder_fped %>%
rename(allele = allele_origin),
rcws_gdrop$founder_alleles %>%
mutate(allele = as.character(allele)) %>%
rename(founder_id = id),
by = 'allele') %>%
left_join(., rcws_founder_info %>% rename(founder_id = id),
by = 'founder_id') %>%
select(id, group, partial_founder_fped, fped_prop) %>%
left_join(pop_info_list[['Scenario3']] %>% rename(id = RCWid), ., by = 'id', relationship = "many-to-many") %>%
filter(!is.na(partial_founder_fped)) %>%
group_by(year, group) %>%
summarize(summed_partial_inbr = sum(partial_founder_fped, na.rm = TRUE),
number_indivs = n(),
.groups = 'drop') %>%
left_join(pop_info_list[['Scenario3']] %>%
group_by(year) %>%
summarize(pop_size = n(), .groups = 'drop'),
by = 'year') %>%
mutate(summed_partial_inbr_std = summed_partial_inbr/pop_size)
### PACKAGES ###
library(here)
### PACKAGES ###
library(here)
source("~/Documents/michigan_state/research/rcwo_project1/scripts/census_analysis.R", echo=TRUE)
transloc_info <- rcw_processed_list$rcws %>%
filter(Origin == 'Translocated') %>%
select(RCWid, MinAge, Sex) %>%
rename(year = MinAge)
### PACKAGES ###
library(here)
source("~/Documents/michigan_state/research/rcwo_project1/scripts/census_analysis.R", echo=TRUE)
source("~/Documents/michigan_state/research/rcwo_project1/scripts/census_analysis.R", echo=TRUE)
lifecycle::last_lifecycle_warnings()
fped_prop_by_group %>%
ggplot() +
geom_bar(aes(x = year, y = fped_group_prop, fill = group),
color = 'white', linewidth = 0.35, width = 0.70,
position = "stack", stat = "identity") +
scale_fill_manual(values = c('#ededed', '#4c4c4c')) +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(linetype = 'dashed', color = '#d8d8d8'),
panel.border = element_blank(),
axis.line.x = element_line(color = '#4c4c4c', linewidth = 1.1),
axis.line.y = element_line(color = '#4c4c4c', linewidth = 1.5),
plot.margin = unit(c(0.25,1,0,1), "cm"),
axis.title.x = element_text(size = 18),
legend.position = 'none',
axis.title.y = element_text(margin = margin(t = 0, r = 14, b = 0, l = 0))
) +
scale_y_continuous(breaks = c(0, 0.5, 1),
labels = c("0.0", "0.5", "1.0")) +
scale_x_continuous(expand = c(0.01, 0), limits = c(1993.5, 2022.5)) +
xlab('Year') +
ylab(substitute(paste(italic(F)["p"], ' prop.')))
source("~/Documents/michigan_state/research/rcwo_project1/scripts/census_analysis.R", echo=TRUE)
rcws_ancestry_info_update
rcws_ancestry_info
rcws_ancestry_info_update
table(rcws_ancestry_info_update$id)
all(table(rcws_ancestry_info_update$id) < 1)
rcws_ancestry_info_update
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc = sum(anc_prop))
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc = sum(anc_prop)) %>%
print(n = 400)
transloc_ids
'HYW-Z' %in% transloc_ids
rcw_processed_list$ped_processed
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc = sum(anc_prop)) %>%
print(n = 400)
rcw_processed_list$ped_processed %>%
filter(id %in% c('HYW-Z', 'KOW-BZ', 'KPL-SZ'))
'KOW-BZ' %in% transloc_ids
'KPL-SZ' %in% transloc_ids
"GBK-PZ" %in% transloc_ids
rcw_processed_list$ped_processed
nrow(rcw_processed_list$ped_processed)
rcws_ancestry_info_update
rcw_processed_list$nests_processed
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc = sum(anc_prop)) %>%
print(n = 400)
rcw_processed_list$nests_processed
rcw_processed_list$nests_processed$MaleID
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc = sum(anc_prop)) %>%
rename(MaleID = id)
rcw_processed_list$nests_processed %>%
left_join(.,
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc = sum(anc_prop)) %>%
rename(MaleID = id),
by = 'MaleID')
rcw_processed_list$nests_processed %>%
left_join(.,
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc_male = sum(anc_prop)) %>%
rename(MaleID = id),
by = 'MaleID') %>%
left_join(.,
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc_female = sum(anc_prop)) %>%
rename(FemaleID = id),
by = 'FemaleID')
nest_info <- rcw_processed_list$nests_processed %>%
left_join(.,
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc_male = sum(anc_prop)) %>%
rename(MaleID = id),
by = 'MaleID') %>%
left_join(.,
rcws_ancestry_info_update %>%
group_by(id) %>%
summarize(total_transloc_anc_female = sum(anc_prop)) %>%
rename(FemaleID = id),
by = 'FemaleID')
nest_info %>%
ggplot() +
geom_point(aes(x = total_transloc_anc_male, y = EggNum))
nest_info %>%
ggplot() +
geom_point(aes(x = total_transloc_anc_male, y = EggNum)) +
theme_bw()
nest_info %>%
ggplot() +
geom_point(aes(x = total_transloc_anc_female, y = EggNum)) +
theme_bw()
nest_info %>%
ggplot() +
geom_point(aes(x = total_transloc_anc_male, y = HatchNum)) +
theme_bw()
nest_info %>%
ggplot() +
geom_point(aes(x = total_transloc_anc_female, y = HatchNum)) +
theme_bw()
nest_info %>%
ggplot(aes(x = total_transloc_anc_female, y = HatchNum)) +
geom_point() +
geom_smooth(method='lm', formula= y~x)
theme_bw()
nest_info %>%
ggplot(aes(x = total_transloc_anc_female, y = HatchNum)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
theme_bw()
nest_info %>%
ggplot() +
geom_point(aes(x = total_transloc_anc_male, y = HatchNum)) +
geom_smooth(method='lm', formula= y~x) +
theme_bw()
nest_info %>%
ggplot(aes(x = total_transloc_anc_male, y = HatchNum)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
theme_bw()
nest_info %>%
ggplot(aes(x = total_transloc_anc_male, y = FldgNum)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
theme_bw()
nest_info %>%
ggplot(aes(x = total_transloc_anc_female, y = FldgNum)) +
geom_point() +
geom_smooth(method='lm', formula= y~x) +
theme_bw()
any(is.na(nest_info$total_transloc_anc_male))
any(is.na(nest_info$total_transloc_anc_female))
nest_info %>%
filter(is.na(total_transloc_anc_male) | is.na(total_transloc_anc_female))
rcw_processed_list$nests_processed$MaleID
any(is.na(rcw_processed_list$nests_processed$fid_dummy))
library(tidyverse)
library(readxl)
library(clock)
library(here)
here::here()
devtools::load_all('/Users/alexlewanski/Documents/r_packages/pedutils')
source(here('scripts', 'data_processing_custom_functions.R'))
file_names <- c('Nests.xlsx', 'RCWs.xlsx', 'RCWs_wout_format.xlsx', 'LastSeenDetail.xlsx')
raw_dat_list <- lapply(setNames(file_names, tolower(gsub('\\.xlsx', '', file_names))), function(x) {
read_excel(here('data', 'feb2024_databasemarch2023', x))
})
summer_census_detected <- raw_dat_list$lastseendetail %>%
filter(Detected == 'Yes' & SurveyType == "Census")  %>%
filter(get_month(RecordDate) >= 6 & get_month(RecordDate) <= 8) %>%
mutate(year = get_year(RecordDate))  %>%
mutate(RCWid_old = RCWid) %>%
mutate(RCWid = case_when(year < 2005 & RCWid == 'GB=Z' ~ 'GB-Z',
TRUE ~ RCWid)) %>%
select(RCWid, Detected, SurveyType, year) %>%
group_by(RCWid, year) %>%
slice_head(n = 1) #if there are more than one observations/indiv/census, keep only one observation
#filter rcws info down to birth information
#add empty Detected column so that it can be combined with the census data
birth_year_info <- raw_dat_list$rcws %>%
mutate(Detected = NA,
SurveyType = 'birth_info') %>%
rename(year = MinAge) %>%
select(RCWid, Detected, SurveyType, year) %>%
filter(!is.na(year))
#combine birth and census information
obs_info_combine <- bind_rows(summer_census_detected,
birth_year_info)
#add observations for any year that a bird was not observed when the observation
#was bookended by observation and/or birth
obs_info_combine_addint <- add_intervening_years(data = obs_info_combine,
id_col = 'RCWid',
year_col = 'year')
#combine the census/birth info with the information on each woodpecker
obs_info_combine_addint1 <- obs_info_combine_addint %>%
left_join(., raw_dat_list$rcws %>%
select(RCWid, Origin),
by = 'RCWid') %>%
mutate(Origin_update = case_when(is.na(Origin) ~ 'unknown',
TRUE ~ Origin))
#unknown_indivs <- unique(obs_info_combine_addint1[obs_info_combine_addint1$Origin_update == 'unknown',]$RCWid)
pop_filters_df <- lapply(split(obs_info_combine_addint1, obs_info_combine_addint1$RCWid), function(DF) {
#1: CENSUS_ONLY
#Only census observations
DF$Scenario1 <- DF$SurveyType %in% 'Census'
#2: CENSUS + DEDUCED
#Census observations and filling in the the gaps between non-consecutive
#census observations
if ('Census' %in% DF$SurveyType) {
first_year <- min(DF$year[DF$SurveyType %in% 'Census'])
DF$Scenario2 <- DF$year >= first_year
} else {
DF$Scenario2 <- FALSE
}
#3: CENSUS/BIRTH + DEDUCED (INCLUDE BIRTH YEAR IF FLEDGED, BORN IN THE POP, AND FOUND IN A SUBSEQUENT CENSUS)
#Similar to 2. Include all census observations but for birds born in the population, record
#the start year as the year where the
if (DF$Origin_update[1] %in% c('Immigrant', 'unknown')) {
if ('Census' %in% DF$SurveyType) {
first_year <- min(DF$year[DF$SurveyType %in% 'Census'])
DF$Scenario3 <- DF$year >= first_year  & DF$SurveyType %in% c('Census', NA)
} else {
DF$Scenario3 <- FALSE
}
} else {
if (all(DF$SurveyType %in% 'birth_info') ) {
DF$Scenario3 <- FALSE
} else {
first_year <- min(DF$year)
DF$Scenario3 <- switch(DF$Origin_update[1],
'Local' = DF$year >= first_year,
'Translocated' = DF$year > first_year)
if (sum(DF$year == min(DF$year)) > 1) {
DF$Scenario3[which(DF$year %in% min(DF$year))[2]] <- FALSE
}
}
}
#4: CENSUS/BIRTH + DEDUCED (EXCLUDE BIRTH YEAR EVEN IF FLEDGED AND FOUND IN A SUBSEQUENT CENSUS)
#Identical to 3 but exclude birth year. This would represent a focus on the breeder population
if (DF$Origin_update[1] %in% c('Immigrant', 'unknown')) {
if ('Census' %in% DF$SurveyType) {
first_year <- min(DF$year[DF$SurveyType %in% 'Census'])
DF$Scenario4 <- DF$year >= first_year & DF$SurveyType %in% c('Census', NA)
} else {
DF$Scenario4 <- FALSE
}
} else {
if (all(DF$SurveyType %in% 'birth_info') ) {
DF$Scenario4 <- FALSE
} else {
first_year <- min(DF$year)
DF$Scenario4 <- DF$year > first_year
}
}
return(DF)
}) %>%
bind_rows() %>%
group_by(year, RCWid) %>%
mutate(Scenario2 = case_when(sum(Scenario2) > 1 ~ c(TRUE, rep(FALSE, length(Scenario2) - 1)),
TRUE ~ Scenario2))
scenarios_long_list <- lapply(setNames(nm = paste0('Scenario', 1:4)), function(x, pop_info) {
pop_info[pop_info %>% pull(x),]
}, pop_info = pop_filters_df)
count_ind_year_scenario <- scenarios_long_list %>%
bind_rows(.id = 'scenario') %>%
group_by(scenario, year, RCWid) %>%
summarize(count = n(), .groups = 'drop') %>%
pull(count)
message("Are all individuals found at most once a year in the processed census info?: ", all(count_ind_year_scenario == 1))
year_seq_ind_year_scenario <- scenarios_long_list %>%
bind_rows(.id = 'scenario') %>%
group_by(scenario, RCWid) %>%
summarize(year_check = identical(as.double(sort(year)), as.double(min(year):max(year))),
.groups = 'drop') %>%
filter(!year_check & !(scenario %in% 'Scenario1')) %>%
pull(year_check) %>%
all()
message("Are all individuals found over a continuous sequence of years in the processed census info?: ", year_seq_ind_year_scenario)
rcw_pedigree_info <- raw_dat_list$nests %>%
select(ID, MaleID, FemaleID) %>%
#left_join(., raw_dat_list$rcws_wout_format[,c('ID', 'RCWid')] %>%
#            rename(MaleID = ID), by = 'MaleID') %>%
#select(-MaleID) %>%
#rename(MaleID = RCWid)  %>%
#left_join(., raw_dat_list$rcws_wout_format[,c('ID', 'RCWid')] %>%
#            rename(FemaleID = ID), by = 'FemaleID') %>%
#select(-FemaleID) %>%
rename(#FemaleID = RCWid,
NatalNest = ID) %>%
left_join(raw_dat_list$rcws_wout_format[,c('RCWid', 'NatalNest', 'Sex')],
.,
by = 'NatalNest')
rcws_ped <- process_ped(ped = rcw_pedigree_info,
id_col = 'RCWid',
sire_col = "MaleID",
dam_col = "FemaleID",
sex_col= 'Sex',
founder_val = NA,
sex_vals = list(male = "M",
female = 'F',
unknown = c("U", NA)),
keep_extra_cols = TRUE,
disable_sex_check = FALSE)
rcws_ped_dummy_pars <- ped_add_dummy_parents(ped = rcws_ped,
id = 'id',
fid = 'fid',
mid = 'mid',
sex = 'sex',
nest_id = 'NatalNest',
founder_parent_vals = '0')
sire_check <- all(rcws_ped_dummy_pars$ped$fid %in% rcws_ped_dummy_pars$ped$id | rcws_ped_dummy_pars$ped$fid == '0')
dam_check <- all(rcws_ped_dummy_pars$ped$mid %in% rcws_ped_dummy_pars$ped$id | rcws_ped_dummy_pars$ped$mid == '0')
message('Do all sires have an entry (i.e., are found in the column)? ', sire_check)
message('Do all dams have an entry (i.e., are found in the column)? ', dam_check)
message('Are there any repeated entries for individuals in the pedigree file? ', any(duplicated(rcws_ped_dummy_pars$ped$id)))
### ADD DUMMY PARENTS TO THE NEST INFORMATION
raw_dat_list$nests$fid_dummy <- raw_dat_list$nests$MaleID
raw_dat_list$nests$mid_dummy <- raw_dat_list$nests$FemaleID
dummy_male_info <- rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$fid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 1],]
dummy_female_info <- rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$mid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 2],]
raw_dat_list$nests$fid_dummy[match(dummy_male_info$NatalNest, raw_dat_list$nests$ID)] <- dummy_male_info$fid
raw_dat_list$nests$mid_dummy[match(dummy_female_info$NatalNest, raw_dat_list$nests$ID)] <- dummy_female_info$mid
raw_dat_list$nests$fid_dummy <- raw_dat_list$nests$MaleID
raw_dat_list$nests$mid_dummy <- raw_dat_list$nests$FemaleID
dummy_male_info <- rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$fid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 1],]
dummy_female_info <- rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$mid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 2],]
rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$fid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 1],]
rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$mid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 2],]
dummy_female_info <- rcws_ped_dummy_pars$ped[rcws_ped_dummy_pars$ped$mid %in% rcws_ped_dummy_pars$dummy_ids$id[rcws_ped_dummy_pars$dummy_ids$sex == 2],]
dummy_male_info$fid
raw_dat_list$nests$fid_dummy[match(dummy_male_info$NatalNest, raw_dat_list$nests$ID)]
raw_dat_list$nests$fid_dummy[match(dummy_male_info$NatalNest, raw_dat_list$nests$ID)] <- dummy_male_info$fid
raw_dat_list$nests$mid_dummy[match(dummy_female_info$NatalNest, raw_dat_list$nests$ID)]
raw_dat_list$nests$mid_dummy[match(dummy_female_info$NatalNest, raw_dat_list$nests$ID)] <- dummy_female_info$mid
raw_dat_list$nests$mid_dummy[match(dummy_female_info$NatalNest, raw_dat_list$nests$ID)]
is.na(raw_dat_list$nests$fid_dummy)
any(is.na(raw_dat_list$nests$fid_dummy))
raw_dat_list %>%
filter(is.na(fid_dummy))
raw_dat_list$nests %>%
filter(is.na(fid_dummy))
colnames(raw_dat_list$nests)
raw_dat_list$nests %>%
filter(is.na(fid_dummy)) %>%
select(Cluster, Year, MaleID, fid_dummy, FemaleID, mid_dummy)
raw_dat_list$nests %>%
filter(is.na(fid_dummy)) %>%
select(Cluster, Year, MaleID, fid_dummy, FemaleID, mid_dummy, EggNum, FldgNum, HatchNum)
raw_dat_list$nests %>%
filter(is.na(fid_dummy)) %>%
select(Cluster, Year, MaleID, fid_dummy, FemaleID, mid_dummy, EggNum, FldgNum, HatchNum)
raw_dat_list$nests %>%
filter(is.na(fid_dummy)) %>%
select(NatalNest_Temp, Cluster, Year, MaleID, fid_dummy, FemaleID, mid_dummy, EggNum, FldgNum, HatchNum)
raw_dat_list$nests %>%
filter(is.na(fid_dummy) | is.na(mid_dummy)) %>%
select(NatalNest_Temp, Cluster, Year, MaleID, fid_dummy, FemaleID, mid_dummy, EggNum, FldgNum, HatchNum)
raw_dat_list$nests
raw_dat_list$nests %>%
filter(is.na(fid_dummy) | is.na(mid_dummy)) %>%
select(NatalNest_Temp, Cluster, Year, MaleID, fid_dummy, FemaleID, mid_dummy, EggNum, FldgNum, HatchNum)
raw_dat_list$rcws %>%
filter(RCWid == 'ZG-CA')
any(is.na(rcw_processed_list$nests_processed$fid_dummy))
